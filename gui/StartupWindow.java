package gui;

/*
 * StartupWindow.java
 *
 * Created on 2009-11-12, 0:34:36
 */
import java.awt.Window;
import java.io.IOException;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.SocketAddress;
import java.net.UnknownHostException;
import java.util.Iterator;
import java.util.Vector;

import javax.swing.JFrame;
import javax.swing.JOptionPane;

import networking.*;
import peer.*;

/**
 *
 * @author H2O
 */
public class StartupWindow extends javax.swing.JFrame implements ServerFinder.ServerListener{

    /** Creates new form StartupWindow 
     * @throws IOException */
    public StartupWindow() throws IOException {
        initComponents();
        initOthers();
    }

    private void initOthers() throws IOException {
    	
		ServerFinder finder = new ServerFinder(ServerAnnouncer.defaultAddress, ServerAnnouncer.defaultPort);
		finder.addServerListener((ServerFinder.ServerListener) this);
		finder.start();
	}

	/** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        joinServerButton = new javax.swing.JButton();
        ServerButton = new javax.swing.JButton();
        NickNameTextField = new javax.swing.JTextField();
        NickNameLabel = new javax.swing.JLabel();
        mainTitle = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ServerList = new javax.swing.JList();
        QuitButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("LAN CHAT ");
        setLocationByPlatform(true);
        joinServerButton.setText("Join Server");
        joinServerButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                joinServerButtonMouseReleased(evt);
            }
        });

        ServerButton.setText("Create a Server");
        ServerButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                ServerButtonMouseReleased(evt);
            }
        });

        NickNameLabel.setText("NickName");

        mainTitle.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        mainTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        mainTitle.setText("LanChat");
        mainTitle.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    	ServerList.setEnabled(true);
        ServerList.setListData(svList);
        ServerList.setModel(new javax.swing.AbstractListModel() {
            public int getSize() { return svList.size(); }
            public Object getElementAt(int i) { return svList.get(i); }
         
        });
        ServerList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                ServerListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(ServerList);

        QuitButton.setText("Quit");
        QuitButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                QuitButtonMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mainTitle, javax.swing.GroupLayout.DEFAULT_SIZE, 428, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 226, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(NickNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(QuitButton, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE)
                            .addComponent(joinServerButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE)
                            .addComponent(ServerButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE)
                            .addComponent(NickNameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(NickNameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE)
                            .addComponent(NickNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ServerButton, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(joinServerButton, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(QuitButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(139, 139, 139))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE)
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>                        

    private void ServerButtonMouseReleased(java.awt.event.MouseEvent evt) {                                           
        
        //display the createServerWindow
    	CreateServerWindow cSW= new CreateServerWindow(NickNameTextField.getText());
    	cSW.setVisible(true);
        
    }                                          

    private void joinServerButtonMouseReleased(java.awt.event.MouseEvent evt) {
    		try{
    		ServerVariable temp = svList.get(ServerList.getSelectedIndex());
    		
    		if(temp.isPasswordRequired() == true){
    			ClientPasswordInputWindow cpInputWindow = new ClientPasswordInputWindow(temp, NickNameTextField.getText());
    			cpInputWindow.setVisible(true);
    		}
    		else{
    			InetSocketAddress address = (InetSocketAddress)temp.getAddress();
    			try {
					Client c = new Client(address.getHostName(),address.getPort(), NickNameTextField.getText(), "");
					c.start();
					
					
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}		
    		}
    		}
    		catch(IndexOutOfBoundsException e){
    			JOptionPane.showMessageDialog(null, "Please Select a Server");
    		}
    		
	}                                             

    private void QuitButtonMouseReleased(java.awt.event.MouseEvent evt) {                                         
        // TODO add your handling code here:
        System.exit(0);
    }                                        

    private void ServerListValueChanged(javax.swing.event.ListSelectionEvent evt) {                                        
        //get the selected index and load the information
    	//ServerList.setListData(svList);
        ServerList.getSelectedIndex();
    }                                       

    /**
    * @param args the command line arguments
     * @throws UnknownHostException 
    */
    public static void main(String args[]){

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
					new StartupWindow().setVisible(true);
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JLabel NickNameLabel;
    private javax.swing.JTextField NickNameTextField;
    private javax.swing.JButton QuitButton;
    private javax.swing.JButton ServerButton;
    private javax.swing.JList ServerList;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton joinServerButton;
    private javax.swing.JLabel mainTitle;
    private Vector<ServerVariable> svList = new Vector<ServerVariable>();
    // End of variables declaration         
    
	public void serverFound(SocketAddress address, String serverName,
			int numMembers, boolean needsPassword) {
		ServerVariable sv = new ServerVariable(address,serverName,numMembers, needsPassword);
		
		for(ServerVariable server : svList) {
			if(server.isSameServer(sv)) {
				server.setNumMembers(numMembers);
				return;
			}
		}
		svList.add(sv);
		ServerList.setListData(svList);
	}

}
